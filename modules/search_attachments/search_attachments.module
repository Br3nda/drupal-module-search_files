<?php
// $Id: search_attachments.module,v 1.1.2.1 2008/10/27 10:00:42 lee20 Exp $
function search_attachments_menu() {
  $items = array();
	$items['admin/settings/search_files/attachments'] = array(
		'title' => 'Attachments',
    'description' => 'configure how attachments are searched',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('search_attachments_settings_form'),
    'access arguments' => array('administer search_files configuration'),
    'type' => MENU_LOCAL_TASK,
	);
  $items['admin/settings/search_files/attachments/update_index'] = array(
		'title' => 'Update the index',
    'description' => 'manually run search_attachments_update_index',
    'page callback' => 'search_attachments_update_index',
    'access arguments' => array('administer search_files configuration'),
    'type' => MENU_CALLBACK,
  );
	return $items;
}

/**
 * Implementation of hook_search().
 */
function search_attachments_search($op = 'search', $keys = NULL) {
	switch($op) {
		case 'name':
      if (user_access('view search_files results') && ! variable_get('search_directories_tab_disabled', FALSE))
				return variable_get('search_attachments_tab_label', t('Attachments'));
			break;

		case 'reset':
					db_query("UPDATE {search_dataset} SET reindex = %d WHERE type = 'search_attachments'", time());
					return;

		case 'status':
      $total = db_result(db_query('SELECT COUNT(*) FROM {files} WHERE status = 1'));
      $remaining = db_result(db_query("SELECT COUNT(*) FROM {files} f LEFT JOIN {search_dataset} d ON d.type = 'search_attachments' AND d.sid = f.fid WHERE f.status = 1 AND (d.sid IS NULL OR d.reindex <> 0)"));
      return array('remaining' => $remaining, 'total' => $total);

    case 'search':
    // Build matching conditions
      list($join1, $where1) = _db_rewrite_sql();
      $arguments1 = array();
      $conditions1 = 'f.status = 1';

      // Do search.
      $find = do_search($keys, 'file', 'INNER JOIN {files} f ON f.fid = i.sid '. $join1, $conditions1 . (empty($where1) ? '' : ' AND '. $where1), $arguments1, $select2, $join2, $arguments2);

      // Do search.
      $find = do_search($keys, 'search_attachments');

      // Load results.
      $results = array();
      foreach ($find as $item) {
        // Build the node body.
				$file = db_fetch_object(db_query("SELECT f.*, d.data, u.nid FROM {files} f JOIN {upload} u USING(fid) INNER JOIN {search_dataset} d ON f.fid = d.sid WHERE fid = %d", $item->sid));
				$node = node_load($file->nid);
				$file->absolute_path = $_SERVER['DOCUMENT_ROOT'].$base_path.$file->filepath;
				$file->info = (object)pathinfo($file->absolute_path);
				$results[] = array(
					'link' => url($file->filepath),
          'title' => $file->filename,
          'user' => theme('username', $node),
          'date' => $file->timestamp,
					'type' => check_plain(search_files_helper_name($file->info->extension)),
          'node' => $node,
//          'extra' => $extra,
          'score' => $item->score / $total,
					'extra' => l(t('Download'), 'download', array('query' => 'file='.$file->absolute_path)),
          'snippet' => search_excerpt($keys, $file->data),
        );
      }
      return $results;					
	}
}
function search_attachments_update_index() {
  $limit = (int)variable_get('search_cron_limit', 100);

  $result = db_query_range("SELECT f.* FROM {files} f LEFT JOIN {search_dataset} d ON d.type = 'search_attachments' AND d.sid = f.fid WHERE d.sid IS NULL OR d.reindex <> 0 ORDER BY d.reindex ASC, f.fid ASC", 0, $limit);

	$found = $count = 0;
  while ($file = db_fetch_object($result)) {
		$found++;
    if (_search_attachments_index_file($file)) $count++;
  }
}

function _search_uploaded_files_index_file($file) {
	$contents = _search_files_get_file_contents($file);
	search_index($file->fid, 'search_attachments', "{$file->filename} ".search_files_convert_to_utf8($contents)); 
	return $contents;
}

function _search_uploaded_files_get_file_contents($file) {
	global $base_path;
	$helpers = search_files_get_helpers();
	$file->absolute_path = $_SERVER['DOCUMENT_ROOT'].$base_path.$file->filepath;
	$file->info = (object)pathinfo($file->absolute_path);

  if (is_file($file->absolute_path) && array_key_exists($file->info->extension, $helpers)) {
		$cmd = preg_replace('/%file%/', escapeshellarg($file->absolute_path), $helpers[$file->info->extension]);
		$contents = shell_exec($cmd);
		return $contents;
	}
	return false;
}

/**
 * generate the settings form for the search_files module using the
 * system_settings_form()function
 */
function search_attachments_settings_form() {
  $form = array();
  $form['search_attachments_tab_label'] = array(
    '#title' => 'Search Label',
    '#type' => 'textfield',
    '#description' => 'What do you want the Search tab to be labeled?',
    '#value' => variable_get('search_attachments_tab_label', 'Attachments'),
  );
	$form['search_attachments_tab_disabled'] = array(
		'#title' => t('Disable search tab'),
		'#type' => 'checkbox',
		'#default_value' => variable_get('search_attachments_tab_disabled', FALSE),
		'#return_value' => 1,
	);
  return system_settings_form($form);
}