<?php
// $Id: search_files_attachments.module,v 1.1.2.3 2009/07/19 00:14:32 thl Exp $

/**
 * @file
 *
 * module implementing the Search Files API to search files
 * that have been uploaded as attachments to nodes
 */

/**
 * Implementation of hook_menu().
 */
function search_files_attachments_menu() {
  $items = array();
  $items['admin/settings/search_files/attachments'] = array(
    'title' => 'Attachments',
    'description' => 'configure how attachments are searched',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('search_files_attachments_settings_form'),
    'access arguments' => array('administer search_files configuration'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/settings/search_files/attachments/update_index'] = array(
    'title' => 'Update the index',
    'description' => 'manually run search_files_attachments_update_index',
    'page callback' => 'search_files_attachments_update_index',
    'page arguments' => array(TRUE),
    'access arguments' => array('administer search_files configuration'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implementation of hook_search().
 */
function search_files_attachments_search($op = 'search', $keys = NULL) {
  switch ($op) {
    case 'name':
      if (user_access('view search_files results') && ! variable_get('search_files_attachments_tab_disabled', FALSE))
        return variable_get('search_files_attachments_tab_label', t('Attachments'));
      break;

    case 'reset':
          db_query("UPDATE {search_dataset} SET reindex = %d WHERE type = 'attachment'", time());
          return;

    case 'status':
      $total = db_result(db_query('SELECT COUNT(*) FROM {files} WHERE status = 1'));
      $remaining = db_result(db_query("SELECT COUNT(*) FROM {files} f LEFT JOIN {search_dataset} d ON d.type = 'attachment' AND d.sid = f.fid WHERE f.status = 1 AND (d.sid IS NULL OR d.reindex <> 0)"));
      return array('remaining' => $remaining, 'total' => $total);

    case 'search':
      global $base_path;

      // Build matching conditions
      list($join1, $where1) = _db_rewrite_sql();

      $arguments1 = array();
      $conditions1 = 'f.status = 1';

      $ranking = array();
      $arguments2 = array();
      $join2 = '';

      $total = 0;

      // base rankings off node rank settings
      if ($weight = (int)variable_get('node_rank_relevance', 5)) {
        // Average relevance values hover around 0.15
        $ranking[] = '%d * i.relevance';
        $arguments2[] = $weight;
        $total += $weight;
      }
      if ($weight = (int)variable_get('node_rank_recent', 5)) {
        // Exponential decay with half-life of 6 months, starting at last indexed node
        $ranking[] = '(%d * POW(2, (f.timestamp) - %d) * 6.43e-8)';
        $arguments2[] = $weight;
        $arguments2[] = (int)variable_get('node_cron_last', 0);
        $total += $weight;
      }


      // When all search factors are disabled (ie they have a weight of zero),
      // the default score is based only on keyword relevance and there is no need to
      // adjust the score of each item.
      if ($total == 0) {
        $select2 = 'i.relevance AS score';
        $total = 1;
      }
      else {
        $select2 = implode(' + ', $ranking) .' AS score';
      }

      // Do search.
      $find = do_search($keys, 'file', 'INNER JOIN {files} f ON f.fid = i.sid '. $join1, $conditions1 . (empty($where1) ? '' : ' AND '. $where1), $arguments1, $select2, $join2, $arguments2);

      // Do search.
      $find = do_search($keys, 'attachment');

      // Load results.
      $results = array();
      foreach ($find as $item) {
        // Build the node body.
        $file = db_fetch_object(db_query("SELECT f.*, d.data, u.nid FROM {files} f JOIN {upload} u USING(fid) INNER JOIN {search_dataset} d ON f.fid = d.sid WHERE fid = %d", $item->sid));
        $node = node_load($file->nid);
        $file->absolute_path = $_SERVER['DOCUMENT_ROOT'] . $base_path . $file->filepath;
        if (is_file($file->absolute_path)) {
          $file->info = (object)pathinfo($file->absolute_path);
          $results[] = array(
            'link' => url($file->filepath),
            'title' => $file->filename,
            'user' => theme('username', $node),
            'date' => $file->timestamp,
            'type' => check_plain(search_files_helper_name($file->info->extension)),
            'node' => $node,
  //          'extra' => $extra,
            'score' => $item->score / $total,
            'extra' => l(t('Download'), 'download', array('query' => 'file='. $file->absolute_path)),
            'snippet' => search_excerpt($keys, $file->data),
          );
        }
      }
      return $results;
  }
}

/**
 * Implementation of hook_update_index().
 */
function search_files_attachments_update_index() {
  $limit = (int)variable_get('search_cron_limit', 100);

  $result = db_query_range("SELECT f.* FROM {files} f LEFT JOIN {search_dataset} d ON d.type = 'attachment' AND d.sid = f.fid WHERE d.sid IS NULL OR d.reindex <> 0 ORDER BY d.reindex ASC, f.fid ASC", 0, $limit);

  $found = $count = 0;
  while ($file = db_fetch_object($result)) {
    $found++;
    if (_search_files_attachments_index_file($file)) $count++;
  }

//  krumo('FOUND | COUNT');
//  krumo($found);
//  krumo($count);
}

/**
 * get files to index
 */
function _search_files_attachments_index_file($file) {
  global $base_path;
  $contents = _search_files_attachments_get_file_contents($_SERVER['DOCUMENT_ROOT'] . $base_path . $file->filepath);
  if ($contents) $contents = search_files_convert_to_utf8("{$file->filename} ". $contents);
  search_index($file->fid, 'attachment', $contents);
  return $contents;
}

/**
 * get the file contents using the helpers configured in the search_files_module
 */
function _search_files_attachments_get_file_contents($path) {
  $helpers = search_files_get_helpers();
  $pathinfo = (object)pathinfo($path);

  $file_exists = is_file($path);
  $helper_exists = array_key_exists($pathinfo->extension, $helpers);

//  krumo($path . ' | File exists: '. ($file_exists ? 'Yes' : 'No') .' | Helper exists: '. ($helper_exists ? 'Yes' : 'No'));
  if ($helper_exists && $file_exists) {
    $cmd = preg_replace('/%file%/', escapeshellarg($path), $helpers[$pathinfo->extension]);
//    krumo($cmd);
    $contents = shell_exec($cmd);
//    krumo($contents);
    return $contents;
  }
  return FALSE;
}

/**
 * generate the settings form for the search_files module using the
 * system_settings_form() function
 */
function search_files_attachments_settings_form() {
  $form = array();
  $form['search_files_attachments_tab_label'] = array(
    '#title' => 'Search Label',
    '#type' => 'textfield',
    '#description' => 'What do you want the Search tab to be labeled?',
    '#default_value' => variable_get('search_files_attachments_tab_label', t('Attachments')),
  );
  $form['search_files_attachments_tab_disabled'] = array(
    '#title' => t('Disable search tab'),
    '#type' => 'checkbox',
    '#default_value' => variable_get('search_files_attachments_tab_disabled', FALSE),
    '#return_value' => 1,
  );
  return system_settings_form($form);
}
